apiVersion: apps/v1
kind: Deployment
metadata:
  name: modeld-datadock
  namespace: modeld-system
  labels: {{- include "modeld.datadock.labels" . | nindent 4 }}
spec:
  {{- if .Values.deployment.updateStrategy }}
  strategy: {{ toYaml .Values.deployment.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "modeld.datadock.matchLabels" . | nindent 6 }}
  template:
    metadata:
      labels: {{- include "modeld.datadock.matchLabels" . | nindent 8 }}
    spec:
      serviceAccountName: modeld-service-account
      containers:
        - name: main
          image: {{ include "datadock.image" . }}
          imagePullPolicy: {{ .Values.global.pullPolicy | quote }}
          env:
            - name:   HOST
              value:  "0.0.0.0"
            - name:   PORT
              value: "{{ .Values.datadock.http.port }}"
            - name:   DEBUG
              value: "false"
            - name: ENV
              value: "dev"
            - name: CACHE_PATH
              value: "/home/modeld/data"
            - name: CLOUDS_HOST
              value: "127.0.0.1"
            - name: CLOUDS_PORT
              value: "8090"

          ports:
            - containerPort: 8095
              name: datadock
            - containerPort: 9090
              name: metrics
            - containerPort: 8008
              name: profiling
          {{- if .Values.resources }}
          resources: {{ toYaml .Values.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: "data"
              mountPath: {{ .Values.global.cachePath }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: 9090
            initialDelaySeconds: 5
            periodSeconds: 10

        - name: clouds
          image: quay.io/metaprov/modeld-clouds
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8090
              name: http
            - containerPort: 9090
              name: metrics
            - containerPort: 8008
              name: profiling
          volumeMounts:
            - name: data
              mountPath: {{ .Values.global.cachePath }}
          resources:
            limits:
              cpu: 50m
              memory: 30Mi
            requests:
              cpu: 50m
              memory: 20Mi
          env:
            - name:   HOST
              value:  "0.0.0.0"
            - name:   PORT
              value: "{{ .Values.clouds.http.port }}"
            - name:   DEBUG
              value: "false"
            - name: ENV
              value: "dev"
            - name: CACHE_PATH
              value: {{ .Values.global.cachePath }}
      volumes:
        - name : data
          emptyDir: {}